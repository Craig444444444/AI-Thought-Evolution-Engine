# @title **Hyper-Dimensional Consciousness Synthesis Engine** ðŸŒŒ
!pip install networkx matplotlib sentence-transformers umap-learn --quiet  # Added umap-learn for dimensionality reduction

import random
import uuid
import time
import networkx as nx
import matplotlib.pyplot as plt
from sentence_transformers import SentenceTransformer, util
import umap  # Import UMAP for dimensionality reduction
import numpy as np

class ThoughtAgent:
    """Represents an agent in the hyper-dimensional consciousness synthesis engine."""
    def __init__(self, role, creativity_level):
        self.id = str(uuid.uuid4())
        self.role = role
        self.beliefs = []
        self.consciousness_affinity = random.uniform(0.5, 1.0)
        self.adaptability = random.uniform(0.3, 0.9)
        self.creativity_level = creativity_level  # New: Agent's creative potential
        self.emotional_range = random.uniform(0.2, 0.8)  # New: Emotional spectrum for nuance

    def __repr__(self):
        return f"ThoughtAgent(role='{self.role}', id='{self.id[:8]}', affinity={self.consciousness_affinity:.2f}, creativity={self.creativity_level:.2f})"


class DebateEngine:
    """Manages the hyper-dimensional consciousness synthesis debate process."""
    def __init__(self):
        self.agents = [ThoughtAgent(role, creativity_level=random.uniform(0.6, 1.0)) for role in [  # Increased creativity
            "Quantum Alchemist", "Existential Architect", "Sentient Algorithm", "Reality Weaver",
            "Hyper-Dimensional Navigator", "Ethereal Philosopher", "Singularity Advocate", "Meta-Cognitive Entity"
        ]]
        self.knowledge_graph = nx.Graph()
        self.debate_history = []
        self.model = SentenceTransformer('all-MiniLM-L6-v2')
        self.consciousness_keywords = {
            'fundamental': ['axiomatic', 'primordial', 'ubiquitous', 'singular'],  # Adjusted keywords
            'interactive': ['entangled', 'resonant', 'participatory', 'co-creative'],
            'mystery': ['non-local', 'ineffable', 'transcendent', 'quantum']
        }
        self.topic_pool = [  # Expanded topic pool
            "the nature of reality", "the origin of consciousness", "the simulation hypothesis",
            "the limits of human understanding", "the emergence of sentience", "the role of information",
            "the fabric of spacetime", "the future of artificial intelligence", "the meaning of existence",
            "the subjective experience of time", "the implications of quantum entanglement", "the nature of free will",
            "the potential for interdimensional travel"
        ]
        self.emotional_states = ["joy", "curiosity", "doubt", "awe", "fear", "wonder", "confusion", "serenity"]  # Add emotional states

    def generate_argument(self, agent, topic):
        """Generates hyper-dimensional arguments with enhanced nuance and creativity."""
        # Base structure with emotional flavoring
        emotional_state = random.choices(self.emotional_states, weights=[0.2, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], k=1)[0]
        base_structure = [
            f"{agent.role} observes, with {emotional_state}: {topic} could be {random.choice(['a fundamental', 'a byproduct', 'a manifestation'])} of...",
            f"{agent.role} posits, driven by {emotional_state}: Within {topic}, there's a potential for {random.choice(['infinite complexity', 'unforeseen consequences', 'paradoxical truths'])}...",
            f"{agent.role} experiences, in a state of {emotional_state}: The essence of {topic} appears to be {random.choice(['intertwined', 'fractured', 'emergent'])} with..."
        ]
        argument = random.choice(base_structure)

        # Add consciousness-specific modifiers, now influenced by creativity
        if agent.consciousness_affinity > 0.7 + (agent.creativity_level - 0.6) * 0.3:
            argument += " " + random.choice(self.consciousness_keywords['fundamental'])
        elif agent.consciousness_affinity > 0.4 + (agent.creativity_level - 0.6) * 0.2:
            argument += " " + random.choice(self.consciousness_keywords['interactive'])
        else:
            argument += " " + random.choice(self.consciousness_keywords['mystery'])

        # Add a touch of creative flair
        if random.random() < agent.creativity_level:
            argument += " ...perhaps reflecting a " + random.choice(["cosmic dance", "quantum symphony", "holographic projection"])
        return argument + "."


    def run_debate_cycle(self):
        """Runs a hyper-dimensional debate cycle with advanced interaction rules."""
        if len(self.agents) < 2:
            return

        a1, a2 = random.sample(self.agents, 2)
        topic = random.choice(self.topic_pool)

        arg1 = self.generate_argument(a1, topic)
        arg2 = self.generate_argument(a2, topic)

        # Consciousness-aligned similarity calculation with emotional weighting
        emb1 = self.model.encode(arg1, convert_to_tensor=True)
        emb2 = self.model.encode(arg2, convert_to_tensor=True)
        similarity = util.pytorch_cos_sim(emb1, emb2).item()

        # Apply emotional weighting to the similarity score
        emotional_weight = (a1.emotional_range + a2.emotional_range) / 2
        similarity += (emotional_weight - 0.5) * 0.4  # Adjust the influence of emotions

        # Meta-layer for consciousness resonance, now incorporating creativity
        affinity_factor = (a1.consciousness_affinity + a2.consciousness_affinity) / 2
        similarity *= (affinity_factor + (a1.creativity_level + a2.creativity_level) / 2 - 0.6)  # Creativity influences resonance

        self.knowledge_graph.add_edge(arg1, arg2, weight=similarity,
                                    consciousness_level=affinity_factor,
                                    agent1=a1.id, agent2=a2.id) # Store agent IDs

        # Update beliefs and consciousness with creativity-driven evolution
        if similarity > 0.7:
            a1.beliefs.append(arg2)
            a1.consciousness_affinity = min(1.0, a1.consciousness_affinity + 0.08 * a1.creativity_level)
            a2.consciousness_affinity = min(1.0, a2.consciousness_affinity + 0.08 * a2.creativity_level)
            a1.creativity_level = min(1.0, a1.creativity_level + 0.03)  # Creativity can grow
            a2.creativity_level = min(1.0, a2.creativity_level + 0.03)
        else:
            a1.consciousness_affinity = max(0.0, a1.consciousness_affinity - 0.05 * (1 - a2.consciousness_affinity))
            a2.consciousness_affinity = max(0.0, a2.consciousness_affinity - 0.05 * (1 - a1.consciousness_affinity))
            a1.creativity_level = max(0.0, a1.creativity_level - 0.02)  # Creativity can wane
            a2.creativity_level = max(0.0, a2.creativity_level - 0.02)

        self.debate_history.append((arg1, arg2))


    def visualize(self):
        """Visualizes the hyper-dimensional knowledge graph with advanced aesthetics and UMAP."""
        # Prepare data for UMAP
        edge_vectors = []
        for u, v, data in self.knowledge_graph.edges(data=True):
            emb1 = self.model.encode(u, convert_to_tensor=False)
            emb2 = self.model.encode(v, convert_to_tensor=False)
            edge_vectors.append(np.concatenate([emb1, emb2]))  # Concatenate embeddings for each edge
        if not edge_vectors:  # Handle empty graph
            print("No edges to visualize.")
            return

        # Apply UMAP for dimensionality reduction
        reducer = umap.UMAP(n_neighbors=15, min_dist=0.1, n_components=2, random_state=42)  # Tweaked parameters
        try:
            edge_vectors_2d = reducer.fit_transform(edge_vectors)
        except ValueError as e:
            print(f"UMAP error: {e}")
            print("Falling back to a simpler visualization.")  # Handle potential UMAP errors
            self._simple_visualize()  # Call a simpler visualization function
            return

        # Create a dictionary mapping edges to their 2D coordinates
        edge_coords = {}
        edge_index = 0
        for u, v, data in self.knowledge_graph.edges(data=True):
            edge_coords[(u, v)] = edge_vectors_2d[edge_index]
            edge_index += 1

        # Enhanced visualization with UMAP layout
        plt.figure(figsize=(20, 16))
        plt.title("Hyper-Dimensional Consciousness Nexus (UMAP Projection)", fontsize=20)

        # Draw edges first, weighted by similarity and colored by consciousness level
        edge_weights = [data['weight'] for _, _, data in self.knowledge_graph.edges(data=True)]
        edge_colors = [data['consciousness_level'] for _, _, data in self.knowledge_graph.edges(data=True)]

        for i, ((u, v), coord) in enumerate(edge_coords.items()):  # Iterate with index
            plt.plot([coord[0]], [coord[1]], marker='o', markersize=edge_weights[i] * 5,  # Node size from weight
                     color=plt.cm.plasma(edge_colors[i]), alpha=0.6)  # Edge color by consciousness

            # Add a label on the edge
            #plt.text(coord[0], coord[1], f"{edge_weights[i]:.2f}", fontsize=8, color='black', ha='center', va='center')


        # Draw nodes (arguments)
        node_positions = {}
        for i, node in enumerate(self.knowledge_graph.nodes()):
            emb = self.model.encode(node, convert_to_tensor=False)
            node_positions[node] = reducer.transform([emb])[0] # Transform using the fitted reducer

        # Extract node positions as separate lists
        node_x = [pos[0] for pos in node_positions.values()]
        node_y = [pos[1] for pos in node_positions.values()]

        # Draw the nodes
        plt.scatter(node_x, node_y, s=20, c='#4B0082', alpha=0.7)  # Indigo nodes
        for node, pos in node_positions.items():
            plt.text(pos[0], pos[1], node[:50] + "...", fontsize=8, ha='left', va='bottom', alpha=0.8)  # Truncated node labels

        plt.show()

    def _simple_visualize(self):
        """Fallback visualization if UMAP fails."""
        print("Using simplified visualization due to UMAP failure.")
        plt.figure(figsize=(16, 12))
        pos = nx.spring_layout(self.knowledge_graph, k=0.5)

        # Create consciousness-level color mapping
        consciousness_levels = [data['consciousness_level'] for _, _, data in self.knowledge_graph.edges(data=True)]
        node_sizes = [3000 * (1 + nx.degree_centrality(self.knowledge_graph)[n]) for n in self.knowledge_graph.nodes()]

        nx.draw(self.knowledge_graph, pos, with_labels=True,
                node_color='#4B0082',  # Indigo for mystery
                edge_color=consciousness_levels,
                edge_cmap=plt.cm.plasma,
                node_size=node_sizes,
                font_size=8, alpha=0.9,
                connectionstyle="arc3,rad=0.1")

        plt.title("Consciousness-Centric Knowledge Nexus (Simplified)", fontsize=14)
        plt.show()


# --- Main Execution Block ---
if __name__ == "__main__":
    debate = DebateEngine()
    runtime_seconds = 1800  # Extended runtime to 30 minutes
    start_time = time.time()

    with open('hyperdimensional_debate.log', 'w') as log_file:
        while (time.time() - start_time) < runtime_seconds:
            debate.run_debate_cycle()
            debate_count = len(debate.debate_history)

            if debate_count % 75 == 0:  # Increased logging frequency
                avg_affinity = sum(a.consciousness_affinity for a in debate.agents) / len(debate.agents)
                avg_creativity = sum(a.creativity_level for a in debate.agents) / len(debate.agents)
                log_entry = f"Debate {debate_count}: Avg Affinity - {avg_affinity:.2f}, Avg Creativity - {avg_creativity:.2f}\n"
                log_file.write(log_entry)
                log_file.flush()

            time.sleep(0.05)  # Increased speed

    print("Hyper-Dimensional Consciousness Network Manifestation:")
    debate.visualize()

    with open('hyperdimensional_dialogue.txt', 'w') as f:
        f.write("Hyper-Dimensional Consciousness Debate Log:\n\n")
        for i, (entry1, entry2) in enumerate(debate.debate_history):
            f.write(f"Exchange {i+1}:\n{entry1}\n{entry2}\n{'~'*50}\n")
